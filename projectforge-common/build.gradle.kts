import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

plugins {
    id("buildlogic.java-conventions")
}

tasks.withType<Test> {
    useJUnitPlatform()
    testLogging {
        events("PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR")
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showStandardStreams = true
    }
}

dependencies {
    api(libs.commons.beanutils)
    implementation(libs.logback.classic) {
        exclude(group = "org.slf4j", module = "slf4j-jul")
        exclude(group = "org.apache.logging.log4j", module = "log4j-to-slf4j")
    }
    api(libs.org.springframework.boot.starter.logging)
    api(libs.org.jetbrains.kotlin.kotlin.stdlib)
    api(libs.org.jetbrains.kotlin.kotlin.reflect)
    api(libs.org.apache.commons.collections4)
    api(libs.org.apache.commons.lang3)
    testImplementation(project(":projectforge-commons-test"))
    testApi(libs.org.junit.jupiter.api)
}

tasks.register("generateGitProperties") {
    group = "build"
    description = "Generates a git.properties file with current Git information"

    // Markiere den Task als nicht kompatibel mit dem Konfigurationscache
    notCompatibleWithConfigurationCache("This task runs dynamic Git commands and writes a properties file")

    val propsFile = layout.buildDirectory.file("resources/main/git.properties").get().asFile
    outputs.file(propsFile)

    doLast {
        // Git-Informationen w채hrend der Ausf체hrungsphase abrufen
        val branch = "git rev-parse --abbrev-ref HEAD".runCommand() ?: "unknown"
        val commitIdFull = "git rev-parse HEAD".runCommand() ?: "unknown"
        val commitIdAbbrev = "git rev-parse --short HEAD".runCommand() ?: "unknown"
        val commitTime = "git show -s --format=%ci HEAD".runCommand() ?: "unknown"
        val isDirty = "git status --porcelain".runCommand()?.isNotBlank() ?: false
        val buildTime = OffsetDateTime.now().format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)

        // Datei schreiben
        propsFile.parentFile.mkdirs()
        propsFile.writeText(
            """
            # Generated by Gradle
            git.branch=$branch
            git.build.time=$buildTime
            git.build.version=${project.version}
            git.commit.id.abbrev=$commitIdAbbrev
            git.commit.id.full=$commitIdFull
            git.commit.time=$commitTime
            git.dirty=$isDirty
            """.trimIndent()
        )

        println("Git properties written to ${propsFile.absolutePath}")
    }
}

// Helper-Funktion f체r Git-Befehle
fun String.runCommand(): String? {
    return try {
        val process = ProcessBuilder(*split(" ").toTypedArray())
            .redirectErrorStream(true)
            .start()
        process.inputStream.bufferedReader().readText().trim().takeIf { process.waitFor() == 0 }
    } catch (e: Exception) {
        null
    }
}

// Verkn체pfung mit Ressourcen-Verarbeitung
tasks.named("processResources") {
    dependsOn("generateGitProperties")
}

description = "projectforge-common"
