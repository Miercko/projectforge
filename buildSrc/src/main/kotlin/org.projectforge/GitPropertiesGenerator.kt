package org.projectforge

import java.io.File
import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

class GitPropertiesGenerator(
    private val rootDir: File,
    private val outputFile: File,
    private val projectVersion: String
) {
    fun generate() {
        val branch = "git rev-parse --abbrev-ref HEAD".runCommand(rootDir) ?: "unknown"
        val commitIdFull = "git rev-parse HEAD".runCommand(rootDir) ?: "unknown"
        val commitIdAbbrev = commitIdFull.take(7)
        val commitTime = "git show -s --format=%ci HEAD".runCommand(rootDir) ?: "unknown"
        val isDirty = "git status --porcelain".runCommand(rootDir)?.isNotBlank().toString()
        val buildTime = OffsetDateTime.now().format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)

        outputFile.parentFile.mkdirs()
        outputFile.writeText(
            """
            # Generated by Gradle
            git.branch=$branch
            git.build.time=$buildTime
            git.build.version=$projectVersion
            git.commit.id.abbrev=$commitIdAbbrev
            git.commit.id.full=$commitIdFull
            git.commit.time=$commitTime
            git.dirty=$isDirty
            """.trimIndent()
        )
        println("Git properties written to ${outputFile.absolutePath}")
    }

    private fun String.runCommand(workingDir: File): String? {
        return try {
            val process = ProcessBuilder(*split(" ").toTypedArray())
                .directory(workingDir)
                .redirectErrorStream(true)
                .start()
            process.inputStream.bufferedReader().readText().trim().takeIf { process.waitFor() == 0 }
        } catch (e: Exception) {
            null
        }
    }
}
